import java.sql.Array;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Set;


public class _reverseString {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String str = new String("MS interview");
		//System.out.println(str);
		//str = "Microsoft Interview";
		//System.out.println(str[0]);
		//String newStr = _reverse(str);
		//System.out.println(newStr);
		//String newStrWord = _reverseWord(str);
		//System.out.println(newStrWord);
/*		
		ArrayList<Integer> list1 = new ArrayList<Integer>();
		ArrayList<Integer> list2 = new ArrayList<Integer>();
		list1.add(10);
		list1.add(20);
		list1.add(5);
		list1.add(-1);
		list1.add(6);
*/
		int[] list1 = {3,2,14,78,35,24,97};
		int[] list2 = {5,6,3,2,35,100,25};
		//int[] newList = intersectionArray(list1,list2);
		int[] dupList = {5,5,4,3,7,3,2,1,2};
		Set<Integer> noDupList = _removeDupList(dupList);
		//System.out.println(noDupList);
		list1 = _mergeSort(list1);
	}

	private static int[] _mergeSort(int[] list1) {
		// TODO Auto-generated method stub
		if(list1.length <=2)
			return null;
		int lengthL = list1.length/2;
		int lengthR = list1.length - lengthL;
		int[] left = new int[lengthL];
		int[] right = new int[lengthR];
		for(int i=0; i<lengthL-1; ++i)
			left[i] = list1[i];
		for(int i=lengthL; i<list1.length; ++i)
			right[i] = list1[i];
		System.out.println(left);
		System.out.println(right);
		return list1;
	}

	private static Set<Integer> _removeDupList(int[] dupList) {
		// TODO Auto-generated method stub
		HashMap<Integer, Integer> dupMap = new HashMap<Integer,Integer>();
		for(int i=0; i<dupList.length; ++i){
			Integer count = dupMap.get(dupList[i]);
			if(count == null){
				dupMap.put(dupList[i], 1);
			}
			else
				dupMap.put(dupList[i], count +1);
		}
		System.out.println(dupMap.keySet());
		Set<Integer> keys;
		keys = dupMap.keySet();
		return keys;
	}

	private static String _reverseWord(String str) {
		// TODO Auto-generated method stub
		str = _reverse(str.toCharArray(),0,str.length()-1);
		if(str == null || str.length() <=1)
			return null;
		char[] strArr = str.toCharArray();
		for(int i=0,start=0,end=0; i<strArr.length; ++i){
			if(strArr[i] == ' ' || i == strArr.length-1){
				if(strArr[i] == ' ')
					end = i-1;
				else
					end = i;
				while(start < end){
					char temp = strArr[start];
					strArr[start] = strArr[end];
					strArr[end] = temp;
					start++;
					end--;
				}
				start = i;
				start++;
			}
		}
		System.out.println(strArr);
		return str;
	}

	private static String _reverse(char[] strArr, int start, int end) {
		// TODO Auto-generated method stub
		while(start < end){
			char temp = strArr[start];
			strArr[start] = strArr[end];
			strArr[end] = temp;
			//System.out.println(strArr[start]+" "+strArr[end]+" "+temp);
			start++;
			end--;
		}
		return new String(strArr);
	}

	private static int[] intersectionArray(int[] list1, int[] list2) {
		// TODO Auto-generated method stub
		HashMap hash1 = new HashMap();
		return null;
	}

	private static String _reverse(String str) {
		// TODO Auto-generated method stub
		if(str == null || str.length() <=1)
			return null;
		char[] strArr  = str.toCharArray();
		char temp;
		int length = strArr.length - 1;
		for(int i = 0; i < length; ++i){
			temp = strArr[i];
			strArr[i] = strArr[length];
			strArr[length--] = temp;
		}
		return new String(strArr);
	}
	
	
	

}
