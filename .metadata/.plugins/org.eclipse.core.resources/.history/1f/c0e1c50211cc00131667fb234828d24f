package learn.java;

import java.util.ArrayList;
import java.util.List;

public class binaryTree {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Node root = new Node(5);
		insert(root,3);
		insert(root,7);
		insert(root,4);
		insert(root,2);
		insert(root,6);
		insert(root,8);
//		List<Integer> arr = new ArrayList<Integer>();
//		arr = traversePreRecursive(root);
//		System.out.println(arr);
//		System.out.println(searchBST(8,root));
	}
	
	public static List<Integer> traversePreRecursive(Node node) {
	    if (node == null) return new ArrayList<Integer>();

	    List<Integer> nodeValues = new ArrayList<Integer>();
	    //nodeValues.add(node.getValue());
	    nodeValues.addAll(traversePreRecursive(node.getLeft()));
	    nodeValues.add(node.getValue());
	    nodeValues.addAll(traversePreRecursive(node.getRight()));

	    return nodeValues;
	}

	static class Node {
	    Node left;
	    
	    Node right;
	 
	    int value;
	 
	    public Node(int value) {
	      this.value = value;
	    }
	    
	    public Node getLeft(){
	    	return left;
	    }
	    
	    public Node getRight(){
	    	return right;
	    }
	    
	    public int getValue(){
	    	return value;
	    }
	  }
	
	public static void insert(Node node, int value) {
	    if (value < node.value) {
	      if (node.left != null) {
	        insert(node.left, value);
	      } else {
	        System.out.println("  Inserted " + value + " to left of "
	            + node.value);
	        node.left = new Node(value);
	      }
	    } else if (value > node.value) {
	      if (node.right != null) {
	        insert(node.right, value);
	      } else {
	        System.out.println("  Inserted " + value + " to right of "
	            + node.value);
	        node.right = new Node(value);
	      }
	    }
	 }
	
	public static int searchBST(int key,Node root){
		if(root == null){
			return 0;
		}
		if(key == root.value){
			return root.value;
		}
		else if (key < root.value)
			return searchBST(key,root.left);
		else
			return searchBST(key,root.right);
	}
	
	public static boolean _isBST(Node root){
		if(root == null)
			return true;
		if(_isBST(root.left) && _isBST(root.right) && _isLeftLesser(root.left, root.value) && _isRightGreater(root.right, root.value))
			return true;
		else
			return false;
	}
	
	public static boolean _isLeftLesser(Node root, int value){
		if(root == null)
			return true;
		if(root.value <= value && _isLeftLesser(root.left, root.value) && _isLeftLesser(root.right, root.value))
			return true;
		else return false;
	}
	public static boolean _isRightGreater(Node root, int value){
		if(root == null)
			return true;
		if(root.value >= value && _isRightGreater(root.left, root.value) && _isRightGreater(root.right, root.value))
			return true;
		else return false;
	}
}